{"version":3,"sources":["Components/Header.js","Components/ListItem.js","Components/ListOfTodoItems.js","Components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","_ref","addNewTodoItem","isArrowShown","isAllCompleted","markAllTodoItems","arrowStyle","react_default","a","createElement","className","type","onClick","String","fromCharCode","onKeyDown","placeholder","ListItem","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","editTodo","event","newTitle","target","value","editTodoItem","todo","id","stopEditing","preventDefault","title","deleteTodoItem","setState","isEditable","state","_this2","_this$props$todo","isCompleted","checkTodoItem","onDoubleClick","onSubmit","onChange","Fragment","defaultChecked","React","Component","ListOfTodoItems","todoItems","map","Components_ListItem","key","Footer","numberOfActiveTasks","showFilteredItems","displayedItemsIdentificator","deleteCompletedItems","word","App","addNewTodo","newToDo","count","preventState","toDoItems","concat","toConsumableArray","checkToDoItem","todoId","changingItemInArray","objectSpread","deleteToDoItem","filter","onlyActiveTodos","identificator","length","markAll","mark","showCurrentItems","filtered","displayedItems","item","rendered","isShown","Components_Header","Components_ListOfTodoItems","Components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.38692f9b.chunk.js","sourcesContent":["import React from 'react'\n\nconst Header = ({addNewTodoItem, isArrowShown, isAllCompleted, markAllTodoItems}) =>{\n\n  let arrowStyle =\"\"\n    if(isAllCompleted){\n      arrowStyle = \"arrow--dark\"\n    }\n\n  return (\n    <header>\n      <h1 className=\"title\">\n        todos\n      </h1>\n      <div className=\"input-wrapper \">\n        {(isArrowShown)\n          ? \n          <button\n            className={\"btn arrow \" + arrowStyle}\n            type=\"button\"\n            onClick={markAllTodoItems}>\n            {String.fromCharCode(10095)}\n          </button>\n            : null\n        }\n        \n        <input \n          onKeyDown={addNewTodoItem} \n          type=\"text\" \n          className=\"input\" \n          placeholder=\"Что надо сделать?\"/>\n      </div>\n  </header>\n  )   \n}\n\n\n\nexport default Header","import React from 'react'\n\n\nclass ListItem extends React.Component{\n\n  constructor(props){\n    super(props)\n    this.state ={\n      isEditable: false,\n    }\n  }\n\n  editTodo = (event) =>{\n    let newTitle = event.target.value;\n    this.props.editTodoItem(this.props.todo.id, newTitle)\n  }\n\n  stopEditing = (event) =>{\n    event.preventDefault();\n    if(!this.props.todo.title){\n        this.props.deleteTodoItem(this.props.todo.id)\n    }\n\n    this.setState({\n      isEditable: false\n    })\n  } \n\n  render(){\n\n  let {isCompleted, title, id} = this.props.todo;\n\n    return(\n      <li \n        className={isCompleted ? \"list__item done\" : \"list__item\"}\n        onClick={()=>this.props.checkTodoItem(id)}\n        onDoubleClick={()=>this.setState({isEditable: true})}>\n        { this.state.isEditable\n          ? <form \n              onSubmit={this.stopEditing}>\n                <input \n                  type=\"text\" \n                  className='list__item--editing'\n                  value={title} \n                  onChange={this.editTodo}/>\n          </form>\n          : <>\n            <label>\n              <input \n                className=\"checkbox\"\n                type=\"checkbox\" \n                defaultChecked={isCompleted}/>\n              {title}\n            </label> \n                    \n            <button \n              className=\"btn delete-btn\" \n              type=\"button\" \n              onClick={()=>this.props.deleteTodoItem(id)}>\n              {String.fromCharCode(10005)}\n            </button>\n          </>\n        }\n      </li>\n    )\n  }\n}\n\n\n\nexport default ListItem","import React from 'react'\n\nimport ListItem from './ListItem'\n\nconst ListOfTodoItems = ({todoItems, checkTodoItem, deleteTodoItem, editTodoItem}) => {\n  return (\n    <main>\n      <ul className=\"list\">\n        {todoItems.map( (todo) => (\n          <ListItem \n            todo={todo} \n            key={todo.id} \n            checkTodoItem={checkTodoItem} \n            deleteTodoItem={deleteTodoItem} \n            editTodoItem={editTodoItem}/>\n            ))}\n      </ul>\n    </main>\n  )\n}\n\nexport default ListOfTodoItems","import React from 'react'\n\n\nconst Footer = ({numberOfActiveTasks, showFilteredItems, displayedItemsIdentificator, deleteCompletedItems}) => {\n  \n\n  const casesForDeclination = [2, 0, 1, 1, 1, 2];\n  const declinationOptions = ['дело', 'дела', 'дел'] \n\n  const word =  declinationOptions[ ( numberOfActiveTasks%100 > 4 && numberOfActiveTasks%100 < 20)\n                  ? 2 \n                  : casesForDeclination[ (numberOfActiveTasks%10 < 5)\n                    ? numberOfActiveTasks%10\n                    : 5 ] \n                  ];  \n  \n  return (\n    <footer className=\"navigation\">\n\n      <p> {numberOfActiveTasks} {word} осталось</p>\n\n      <div>\n        <button \n          className = {\"btn navigation__btn \" + ((displayedItemsIdentificator===\"all\") ? ' active' : '')} \n          type = \"button\" \n          onClick = { () => showFilteredItems('all')}>\n          Все\n        </button>\n\n        <button \n          className = {\"btn navigation__btn\" + ((displayedItemsIdentificator===\"active\") ? ' active' : '')} \n          type=\"button\" \n          onClick={ () => showFilteredItems('active')}>\n          Активные\n        </button>\n\n        <button \n          className = {\"btn navigation__btn\" + ((displayedItemsIdentificator===\"completed\") ? ' active' : '')}\n          type=\"button\"\n          onClick={ () => showFilteredItems('completed')}>\n          Завершённые\n        </button>\n      </div>\n\n      <button \n        className=\"btn\" \n        type=\"button\" \n        onClick={deleteCompletedItems}>\n        Очистить завершённые\n      </button>\n\n    </footer>\n  )\n}\n\nexport default Footer","import React from 'react';\n\nimport './App.css';\nimport Header from './Components/Header'\nimport ListOfTodoItems from './Components/ListOfTodoItems'\nimport Footer  from './Components/Footer'\n\n\nclass App extends React.Component {\n  constructor(){\n    super()\n    this.state={\n      toDoItems:[],\n      displayedItemsIdentificator: 'all',\n      count: 1,\n    }\n  }\n\n  addNewTodo = (event) =>{\n    if(event.key !== 'Enter' || !event.target.value) return;\n\n    let newToDo = {\n      id: this.state.count,\n      title: event.target.value,\n      isCompleted: false\n    }\n    event.target.value = null;\n\n    this.setState( (preventState) => {\n      return {\n        toDoItems:[...preventState.toDoItems, newToDo],\n        count: preventState.count + 1,\n      }\n    })\n  }\n\n  checkToDoItem = (todoId) => {\n    this.setState(preventState => {\n      const updatedTodos = preventState.toDoItems.map( todo => {\n        if (todo.id === todoId){       \n          todo.isCompleted = !todo.isCompleted\n        }\n        return todo\n      })\n\n      return {toDoItems: updatedTodos }\n    })\n  }\n\n  changingItemInArray = (todoId, newTitle) =>{\n    this.setState(preventState => {\n      const updatedTodos = preventState.toDoItems.map( todo => {\n        if (todo.id !== todoId){  \n          return todo     \n        } \n        return {...todo, title: newTitle}\n      })\n    \n      return {toDoItems: updatedTodos }\n    })\n  }\n\n  deleteToDoItem = (todoId) => {\n    this.setState(preventState => {\n      const updatedTodos = [...preventState.toDoItems].filter(todo => (todo.id !== todoId))\n      return {toDoItems: updatedTodos }\n    })\n  }\n\n  deleteCompletedItems = () =>{\n    const onlyActiveTodos = [...this.state.toDoItems].filter(todo => (todo.isCompleted !== true));\n\n    let identificator = (onlyActiveTodos.length === 0)\n      ? 'all'\n      : this.state.displayedItemsIdentificator;\n\n    this.setState(\n      {toDoItems: onlyActiveTodos,\n      displayedItemsIdentificator: identificator}\n    )\n  }\n\n  markAll = () =>{\n    let mark = true;\n    if(this.state.toDoItems.filter(todo => !todo.isCompleted).length === 0){\n      mark = false\n    }\n    this.setState(preventState => {\n    let markedItems = preventState.toDoItems.map(todo=> {return {...todo, isCompleted:mark}});\n\n    return {\n      toDoItems: markedItems\n    }\n    })\n  }\n\n  showCurrentItems = (identificator) => {\n    this.setState({ displayedItemsIdentificator: identificator})\n  }\n\n  filtered = (identificator) => {\n    let  displayedItems = [];\n\n    switch (identificator || this.state.displayedItemsIdentificator){\n      case \"active\":\n        displayedItems = this.state.toDoItems.filter(todo => !todo.isCompleted);\n      break;\n\n      case \"completed\":\n        displayedItems = this.state.toDoItems.filter(item => item.isCompleted);\n      break;\n\n      case \"all\":\n      default:\n        displayedItems = this.state.toDoItems\n    }\n\n    return displayedItems\n  }\n\n\n  render(){ \n\n    let rendered = this.filtered(); \n    let isShown  = this.state.toDoItems.length > 0;\n    let isAllCompleted = (this.state.toDoItems.length === this.filtered('completed').length);\n\n    return (\n      <div className=\"app\">\n        <Header \n          addNewTodoItem={this.addNewTodo} \n          markAllTodoItems={this.markAll} \n          isArrowShown={isShown} \n          isAllCompleted={isAllCompleted}/>\n\n        {(isShown) \n          ?<>\n          <ListOfTodoItems\n            todoItems={rendered} \n            checkTodoItem={this.checkToDoItem} \n            deleteTodoItem={this.deleteToDoItem} \n            editTodoItem={this.changingItemInArray}/>\n          <Footer \n            numberOfActiveTasks={this.filtered('active').length} \n            showFilteredItems={this.showCurrentItems} \n            displayedItemsIdentificator={this.state.displayedItemsIdentificator} \n            deleteCompletedItems={this.deleteCompletedItems}/>\n          </>   \n          : null}\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}